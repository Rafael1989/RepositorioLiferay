package br.com.gndi.liferay.model.impl;

import br.com.gndi.liferay.model.Contrato;
import br.com.gndi.liferay.model.ContratoModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Contrato service. Represents a row in the &quot;NI_Contrato&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link br.com.gndi.liferay.model.ContratoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContratoImpl}.
 * </p>
 *
 * @author Rafael
 * @see ContratoImpl
 * @see br.com.gndi.liferay.model.Contrato
 * @see br.com.gndi.liferay.model.ContratoModel
 * @generated
 */
public class ContratoModelImpl extends BaseModelImpl<Contrato>
    implements ContratoModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a contrato model instance should use the {@link br.com.gndi.liferay.model.Contrato} interface instead.
     */
    public static final String TABLE_NAME = "NI_Contrato";
    public static final Object[][] TABLE_COLUMNS = {
            { "contratoId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "unidade", Types.VARCHAR },
            { "grupoContrato", Types.VARCHAR },
            { "contrato", Types.VARCHAR },
            { "nomeContrato", Types.VARCHAR },
            { "subContrato", Types.VARCHAR },
            { "nomeSubContrato", Types.VARCHAR },
            { "codigoPlano", Types.VARCHAR },
            { "nomePlano", Types.VARCHAR },
            { "email", Types.VARCHAR },
            { "email1", Types.VARCHAR },
            { "email2", Types.VARCHAR },
            { "email3", Types.VARCHAR },
            { "email4", Types.VARCHAR },
            { "email5", Types.VARCHAR },
            { "resposta", Types.VARCHAR },
            { "dataEnvio", Types.TIMESTAMP },
            { "dataResposta", Types.TIMESTAMP },
            { "dataCadastro", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table NI_Contrato (contratoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,unidade VARCHAR(75) null,grupoContrato VARCHAR(75) null,contrato VARCHAR(75) null,nomeContrato VARCHAR(75) null,subContrato VARCHAR(75) null,nomeSubContrato VARCHAR(75) null,codigoPlano VARCHAR(75) null,nomePlano VARCHAR(75) null,email VARCHAR(75) null,email1 VARCHAR(75) null,email2 VARCHAR(75) null,email3 VARCHAR(75) null,email4 VARCHAR(75) null,email5 VARCHAR(75) null,resposta VARCHAR(75) null,dataEnvio DATE null,dataResposta DATE null,dataCadastro DATE null)";
    public static final String TABLE_SQL_DROP = "drop table NI_Contrato";
    public static final String ORDER_BY_JPQL = " ORDER BY contrato.nomePlano ASC";
    public static final String ORDER_BY_SQL = " ORDER BY NI_Contrato.nomePlano ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.br.com.gndi.liferay.model.Contrato"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.br.com.gndi.liferay.model.Contrato"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.br.com.gndi.liferay.model.Contrato"),
            true);
    public static long EMAIL_COLUMN_BITMASK = 1L;
    public static long NOMECONTRATO_COLUMN_BITMASK = 2L;
    public static long UNIDADE_COLUMN_BITMASK = 4L;
    public static long NOMEPLANO_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.br.com.gndi.liferay.model.Contrato"));
    private static ClassLoader _classLoader = Contrato.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Contrato.class
        };
    private long _contratoId;
    private long _groupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private String _unidade;
    private String _originalUnidade;
    private String _grupoContrato;
    private String _contrato;
    private String _nomeContrato;
    private String _originalNomeContrato;
    private String _subContrato;
    private String _nomeSubContrato;
    private String _codigoPlano;
    private String _nomePlano;
    private String _email;
    private String _originalEmail;
    private String _email1;
    private String _email2;
    private String _email3;
    private String _email4;
    private String _email5;
    private String _resposta;
    private Date _dataEnvio;
    private Date _dataResposta;
    private Date _dataCadastro;
    private long _columnBitmask;
    private Contrato _escapedModel;

    public ContratoModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _contratoId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setContratoId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _contratoId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Contrato.class;
    }

    @Override
    public String getModelClassName() {
        return Contrato.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("contratoId", getContratoId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("unidade", getUnidade());
        attributes.put("grupoContrato", getGrupoContrato());
        attributes.put("contrato", getContrato());
        attributes.put("nomeContrato", getNomeContrato());
        attributes.put("subContrato", getSubContrato());
        attributes.put("nomeSubContrato", getNomeSubContrato());
        attributes.put("codigoPlano", getCodigoPlano());
        attributes.put("nomePlano", getNomePlano());
        attributes.put("email", getEmail());
        attributes.put("email1", getEmail1());
        attributes.put("email2", getEmail2());
        attributes.put("email3", getEmail3());
        attributes.put("email4", getEmail4());
        attributes.put("email5", getEmail5());
        attributes.put("resposta", getResposta());
        attributes.put("dataEnvio", getDataEnvio());
        attributes.put("dataResposta", getDataResposta());
        attributes.put("dataCadastro", getDataCadastro());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long contratoId = (Long) attributes.get("contratoId");

        if (contratoId != null) {
            setContratoId(contratoId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String unidade = (String) attributes.get("unidade");

        if (unidade != null) {
            setUnidade(unidade);
        }

        String grupoContrato = (String) attributes.get("grupoContrato");

        if (grupoContrato != null) {
            setGrupoContrato(grupoContrato);
        }

        String contrato = (String) attributes.get("contrato");

        if (contrato != null) {
            setContrato(contrato);
        }

        String nomeContrato = (String) attributes.get("nomeContrato");

        if (nomeContrato != null) {
            setNomeContrato(nomeContrato);
        }

        String subContrato = (String) attributes.get("subContrato");

        if (subContrato != null) {
            setSubContrato(subContrato);
        }

        String nomeSubContrato = (String) attributes.get("nomeSubContrato");

        if (nomeSubContrato != null) {
            setNomeSubContrato(nomeSubContrato);
        }

        String codigoPlano = (String) attributes.get("codigoPlano");

        if (codigoPlano != null) {
            setCodigoPlano(codigoPlano);
        }

        String nomePlano = (String) attributes.get("nomePlano");

        if (nomePlano != null) {
            setNomePlano(nomePlano);
        }

        String email = (String) attributes.get("email");

        if (email != null) {
            setEmail(email);
        }

        String email1 = (String) attributes.get("email1");

        if (email1 != null) {
            setEmail1(email1);
        }

        String email2 = (String) attributes.get("email2");

        if (email2 != null) {
            setEmail2(email2);
        }

        String email3 = (String) attributes.get("email3");

        if (email3 != null) {
            setEmail3(email3);
        }

        String email4 = (String) attributes.get("email4");

        if (email4 != null) {
            setEmail4(email4);
        }

        String email5 = (String) attributes.get("email5");

        if (email5 != null) {
            setEmail5(email5);
        }

        String resposta = (String) attributes.get("resposta");

        if (resposta != null) {
            setResposta(resposta);
        }

        Date dataEnvio = (Date) attributes.get("dataEnvio");

        if (dataEnvio != null) {
            setDataEnvio(dataEnvio);
        }

        Date dataResposta = (Date) attributes.get("dataResposta");

        if (dataResposta != null) {
            setDataResposta(dataResposta);
        }

        Date dataCadastro = (Date) attributes.get("dataCadastro");

        if (dataCadastro != null) {
            setDataCadastro(dataCadastro);
        }
    }

    @Override
    public long getContratoId() {
        return _contratoId;
    }

    @Override
    public void setContratoId(long contratoId) {
        _contratoId = contratoId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getUnidade() {
        if (_unidade == null) {
            return StringPool.BLANK;
        } else {
            return _unidade;
        }
    }

    @Override
    public void setUnidade(String unidade) {
        _columnBitmask |= UNIDADE_COLUMN_BITMASK;

        if (_originalUnidade == null) {
            _originalUnidade = _unidade;
        }

        _unidade = unidade;
    }

    public String getOriginalUnidade() {
        return GetterUtil.getString(_originalUnidade);
    }

    @Override
    public String getGrupoContrato() {
        if (_grupoContrato == null) {
            return StringPool.BLANK;
        } else {
            return _grupoContrato;
        }
    }

    @Override
    public void setGrupoContrato(String grupoContrato) {
        _grupoContrato = grupoContrato;
    }

    @Override
    public String getContrato() {
        if (_contrato == null) {
            return StringPool.BLANK;
        } else {
            return _contrato;
        }
    }

    @Override
    public void setContrato(String contrato) {
        _contrato = contrato;
    }

    @Override
    public String getNomeContrato() {
        if (_nomeContrato == null) {
            return StringPool.BLANK;
        } else {
            return _nomeContrato;
        }
    }

    @Override
    public void setNomeContrato(String nomeContrato) {
        _columnBitmask |= NOMECONTRATO_COLUMN_BITMASK;

        if (_originalNomeContrato == null) {
            _originalNomeContrato = _nomeContrato;
        }

        _nomeContrato = nomeContrato;
    }

    public String getOriginalNomeContrato() {
        return GetterUtil.getString(_originalNomeContrato);
    }

    @Override
    public String getSubContrato() {
        if (_subContrato == null) {
            return StringPool.BLANK;
        } else {
            return _subContrato;
        }
    }

    @Override
    public void setSubContrato(String subContrato) {
        _subContrato = subContrato;
    }

    @Override
    public String getNomeSubContrato() {
        if (_nomeSubContrato == null) {
            return StringPool.BLANK;
        } else {
            return _nomeSubContrato;
        }
    }

    @Override
    public void setNomeSubContrato(String nomeSubContrato) {
        _nomeSubContrato = nomeSubContrato;
    }

    @Override
    public String getCodigoPlano() {
        if (_codigoPlano == null) {
            return StringPool.BLANK;
        } else {
            return _codigoPlano;
        }
    }

    @Override
    public void setCodigoPlano(String codigoPlano) {
        _codigoPlano = codigoPlano;
    }

    @Override
    public String getNomePlano() {
        if (_nomePlano == null) {
            return StringPool.BLANK;
        } else {
            return _nomePlano;
        }
    }

    @Override
    public void setNomePlano(String nomePlano) {
        _columnBitmask = -1L;

        _nomePlano = nomePlano;
    }

    @Override
    public String getEmail() {
        if (_email == null) {
            return StringPool.BLANK;
        } else {
            return _email;
        }
    }

    @Override
    public void setEmail(String email) {
        _columnBitmask |= EMAIL_COLUMN_BITMASK;

        if (_originalEmail == null) {
            _originalEmail = _email;
        }

        _email = email;
    }

    public String getOriginalEmail() {
        return GetterUtil.getString(_originalEmail);
    }

    @Override
    public String getEmail1() {
        if (_email1 == null) {
            return StringPool.BLANK;
        } else {
            return _email1;
        }
    }

    @Override
    public void setEmail1(String email1) {
        _email1 = email1;
    }

    @Override
    public String getEmail2() {
        if (_email2 == null) {
            return StringPool.BLANK;
        } else {
            return _email2;
        }
    }

    @Override
    public void setEmail2(String email2) {
        _email2 = email2;
    }

    @Override
    public String getEmail3() {
        if (_email3 == null) {
            return StringPool.BLANK;
        } else {
            return _email3;
        }
    }

    @Override
    public void setEmail3(String email3) {
        _email3 = email3;
    }

    @Override
    public String getEmail4() {
        if (_email4 == null) {
            return StringPool.BLANK;
        } else {
            return _email4;
        }
    }

    @Override
    public void setEmail4(String email4) {
        _email4 = email4;
    }

    @Override
    public String getEmail5() {
        if (_email5 == null) {
            return StringPool.BLANK;
        } else {
            return _email5;
        }
    }

    @Override
    public void setEmail5(String email5) {
        _email5 = email5;
    }

    @Override
    public String getResposta() {
        if (_resposta == null) {
            return StringPool.BLANK;
        } else {
            return _resposta;
        }
    }

    @Override
    public void setResposta(String resposta) {
        _resposta = resposta;
    }

    @Override
    public Date getDataEnvio() {
        return _dataEnvio;
    }

    @Override
    public void setDataEnvio(Date dataEnvio) {
        _dataEnvio = dataEnvio;
    }

    @Override
    public Date getDataResposta() {
        return _dataResposta;
    }

    @Override
    public void setDataResposta(Date dataResposta) {
        _dataResposta = dataResposta;
    }

    @Override
    public Date getDataCadastro() {
        return _dataCadastro;
    }

    @Override
    public void setDataCadastro(Date dataCadastro) {
        _dataCadastro = dataCadastro;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Contrato.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Contrato toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Contrato) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ContratoImpl contratoImpl = new ContratoImpl();

        contratoImpl.setContratoId(getContratoId());
        contratoImpl.setGroupId(getGroupId());
        contratoImpl.setCompanyId(getCompanyId());
        contratoImpl.setUserId(getUserId());
        contratoImpl.setUserName(getUserName());
        contratoImpl.setCreateDate(getCreateDate());
        contratoImpl.setModifiedDate(getModifiedDate());
        contratoImpl.setUnidade(getUnidade());
        contratoImpl.setGrupoContrato(getGrupoContrato());
        contratoImpl.setContrato(getContrato());
        contratoImpl.setNomeContrato(getNomeContrato());
        contratoImpl.setSubContrato(getSubContrato());
        contratoImpl.setNomeSubContrato(getNomeSubContrato());
        contratoImpl.setCodigoPlano(getCodigoPlano());
        contratoImpl.setNomePlano(getNomePlano());
        contratoImpl.setEmail(getEmail());
        contratoImpl.setEmail1(getEmail1());
        contratoImpl.setEmail2(getEmail2());
        contratoImpl.setEmail3(getEmail3());
        contratoImpl.setEmail4(getEmail4());
        contratoImpl.setEmail5(getEmail5());
        contratoImpl.setResposta(getResposta());
        contratoImpl.setDataEnvio(getDataEnvio());
        contratoImpl.setDataResposta(getDataResposta());
        contratoImpl.setDataCadastro(getDataCadastro());

        contratoImpl.resetOriginalValues();

        return contratoImpl;
    }

    @Override
    public int compareTo(Contrato contrato) {
        int value = 0;

        value = getNomePlano().compareTo(contrato.getNomePlano());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Contrato)) {
            return false;
        }

        Contrato contrato = (Contrato) obj;

        long primaryKey = contrato.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ContratoModelImpl contratoModelImpl = this;

        contratoModelImpl._originalUnidade = contratoModelImpl._unidade;

        contratoModelImpl._originalNomeContrato = contratoModelImpl._nomeContrato;

        contratoModelImpl._originalEmail = contratoModelImpl._email;

        contratoModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Contrato> toCacheModel() {
        ContratoCacheModel contratoCacheModel = new ContratoCacheModel();

        contratoCacheModel.contratoId = getContratoId();

        contratoCacheModel.groupId = getGroupId();

        contratoCacheModel.companyId = getCompanyId();

        contratoCacheModel.userId = getUserId();

        contratoCacheModel.userName = getUserName();

        String userName = contratoCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            contratoCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            contratoCacheModel.createDate = createDate.getTime();
        } else {
            contratoCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            contratoCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            contratoCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        contratoCacheModel.unidade = getUnidade();

        String unidade = contratoCacheModel.unidade;

        if ((unidade != null) && (unidade.length() == 0)) {
            contratoCacheModel.unidade = null;
        }

        contratoCacheModel.grupoContrato = getGrupoContrato();

        String grupoContrato = contratoCacheModel.grupoContrato;

        if ((grupoContrato != null) && (grupoContrato.length() == 0)) {
            contratoCacheModel.grupoContrato = null;
        }

        contratoCacheModel.contrato = getContrato();

        String contrato = contratoCacheModel.contrato;

        if ((contrato != null) && (contrato.length() == 0)) {
            contratoCacheModel.contrato = null;
        }

        contratoCacheModel.nomeContrato = getNomeContrato();

        String nomeContrato = contratoCacheModel.nomeContrato;

        if ((nomeContrato != null) && (nomeContrato.length() == 0)) {
            contratoCacheModel.nomeContrato = null;
        }

        contratoCacheModel.subContrato = getSubContrato();

        String subContrato = contratoCacheModel.subContrato;

        if ((subContrato != null) && (subContrato.length() == 0)) {
            contratoCacheModel.subContrato = null;
        }

        contratoCacheModel.nomeSubContrato = getNomeSubContrato();

        String nomeSubContrato = contratoCacheModel.nomeSubContrato;

        if ((nomeSubContrato != null) && (nomeSubContrato.length() == 0)) {
            contratoCacheModel.nomeSubContrato = null;
        }

        contratoCacheModel.codigoPlano = getCodigoPlano();

        String codigoPlano = contratoCacheModel.codigoPlano;

        if ((codigoPlano != null) && (codigoPlano.length() == 0)) {
            contratoCacheModel.codigoPlano = null;
        }

        contratoCacheModel.nomePlano = getNomePlano();

        String nomePlano = contratoCacheModel.nomePlano;

        if ((nomePlano != null) && (nomePlano.length() == 0)) {
            contratoCacheModel.nomePlano = null;
        }

        contratoCacheModel.email = getEmail();

        String email = contratoCacheModel.email;

        if ((email != null) && (email.length() == 0)) {
            contratoCacheModel.email = null;
        }

        contratoCacheModel.email1 = getEmail1();

        String email1 = contratoCacheModel.email1;

        if ((email1 != null) && (email1.length() == 0)) {
            contratoCacheModel.email1 = null;
        }

        contratoCacheModel.email2 = getEmail2();

        String email2 = contratoCacheModel.email2;

        if ((email2 != null) && (email2.length() == 0)) {
            contratoCacheModel.email2 = null;
        }

        contratoCacheModel.email3 = getEmail3();

        String email3 = contratoCacheModel.email3;

        if ((email3 != null) && (email3.length() == 0)) {
            contratoCacheModel.email3 = null;
        }

        contratoCacheModel.email4 = getEmail4();

        String email4 = contratoCacheModel.email4;

        if ((email4 != null) && (email4.length() == 0)) {
            contratoCacheModel.email4 = null;
        }

        contratoCacheModel.email5 = getEmail5();

        String email5 = contratoCacheModel.email5;

        if ((email5 != null) && (email5.length() == 0)) {
            contratoCacheModel.email5 = null;
        }

        contratoCacheModel.resposta = getResposta();

        String resposta = contratoCacheModel.resposta;

        if ((resposta != null) && (resposta.length() == 0)) {
            contratoCacheModel.resposta = null;
        }

        Date dataEnvio = getDataEnvio();

        if (dataEnvio != null) {
            contratoCacheModel.dataEnvio = dataEnvio.getTime();
        } else {
            contratoCacheModel.dataEnvio = Long.MIN_VALUE;
        }

        Date dataResposta = getDataResposta();

        if (dataResposta != null) {
            contratoCacheModel.dataResposta = dataResposta.getTime();
        } else {
            contratoCacheModel.dataResposta = Long.MIN_VALUE;
        }

        Date dataCadastro = getDataCadastro();

        if (dataCadastro != null) {
            contratoCacheModel.dataCadastro = dataCadastro.getTime();
        } else {
            contratoCacheModel.dataCadastro = Long.MIN_VALUE;
        }

        return contratoCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(51);

        sb.append("{contratoId=");
        sb.append(getContratoId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", unidade=");
        sb.append(getUnidade());
        sb.append(", grupoContrato=");
        sb.append(getGrupoContrato());
        sb.append(", contrato=");
        sb.append(getContrato());
        sb.append(", nomeContrato=");
        sb.append(getNomeContrato());
        sb.append(", subContrato=");
        sb.append(getSubContrato());
        sb.append(", nomeSubContrato=");
        sb.append(getNomeSubContrato());
        sb.append(", codigoPlano=");
        sb.append(getCodigoPlano());
        sb.append(", nomePlano=");
        sb.append(getNomePlano());
        sb.append(", email=");
        sb.append(getEmail());
        sb.append(", email1=");
        sb.append(getEmail1());
        sb.append(", email2=");
        sb.append(getEmail2());
        sb.append(", email3=");
        sb.append(getEmail3());
        sb.append(", email4=");
        sb.append(getEmail4());
        sb.append(", email5=");
        sb.append(getEmail5());
        sb.append(", resposta=");
        sb.append(getResposta());
        sb.append(", dataEnvio=");
        sb.append(getDataEnvio());
        sb.append(", dataResposta=");
        sb.append(getDataResposta());
        sb.append(", dataCadastro=");
        sb.append(getDataCadastro());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(79);

        sb.append("<model><model-name>");
        sb.append("br.com.gndi.liferay.model.Contrato");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>contratoId</column-name><column-value><![CDATA[");
        sb.append(getContratoId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>unidade</column-name><column-value><![CDATA[");
        sb.append(getUnidade());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>grupoContrato</column-name><column-value><![CDATA[");
        sb.append(getGrupoContrato());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contrato</column-name><column-value><![CDATA[");
        sb.append(getContrato());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>nomeContrato</column-name><column-value><![CDATA[");
        sb.append(getNomeContrato());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>subContrato</column-name><column-value><![CDATA[");
        sb.append(getSubContrato());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>nomeSubContrato</column-name><column-value><![CDATA[");
        sb.append(getNomeSubContrato());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>codigoPlano</column-name><column-value><![CDATA[");
        sb.append(getCodigoPlano());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>nomePlano</column-name><column-value><![CDATA[");
        sb.append(getNomePlano());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email</column-name><column-value><![CDATA[");
        sb.append(getEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email1</column-name><column-value><![CDATA[");
        sb.append(getEmail1());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email2</column-name><column-value><![CDATA[");
        sb.append(getEmail2());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email3</column-name><column-value><![CDATA[");
        sb.append(getEmail3());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email4</column-name><column-value><![CDATA[");
        sb.append(getEmail4());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email5</column-name><column-value><![CDATA[");
        sb.append(getEmail5());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>resposta</column-name><column-value><![CDATA[");
        sb.append(getResposta());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dataEnvio</column-name><column-value><![CDATA[");
        sb.append(getDataEnvio());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dataResposta</column-name><column-value><![CDATA[");
        sb.append(getDataResposta());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dataCadastro</column-name><column-value><![CDATA[");
        sb.append(getDataCadastro());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
